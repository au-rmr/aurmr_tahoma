#!/usr/bin/env python

import rospy
import actionlib
from aurmr_hri.msg import SpecifyGraspPoseAction, SpecifyGraspPoseResult
from geometry_msgs.msg import PoseStamped
from interactive_markers.interactive_marker_server import InteractiveMarkerServer
from interactive_markers.menu_handler import MenuHandler
from visualization_msgs.msg import InteractiveMarker, InteractiveMarkerControl, Marker, InteractiveMarkerFeedback

class SpecifyGraspPoseActionServer:
    def __init__(self):
        self._as = actionlib.SimpleActionServer('specify_grasp_pose', SpecifyGraspPoseAction, execute_cb=self.execute_cb, auto_start=False)
        self._as.start()
        self._marker_server = InteractiveMarkerServer("grasp_pose_marker")
        self._menu_handler = MenuHandler()

        # Adding menu entries
        self._menu_handler.insert("Submit Grasp Pose", callback=self.process_feedback)
        rospy.loginfo("SpecifyGraspPoseAction server started")

    def execute_cb(self, goal):
        rospy.loginfo("Received goal with object_asin: %s, bin_id: %s", goal.object_asin, goal.bin_id)

        # Create an interactive marker for the candidate grasp pose
        marker = InteractiveMarker()
        marker.header.frame_id = goal.candidate_grasp_pose.header.frame_id
        marker.name = "grasp_pose_marker"
        marker.description = "Adjust Grasp Pose"
        marker.pose = goal.candidate_grasp_pose.pose

        # Set the marker as an axis marker
        axis_marker = Marker()
        axis_marker.type = Marker.ARROW  # Change to Marker.AXIS for an axis marker
        axis_marker.scale.x = 0.1
        axis_marker.scale.y = 0.02
        axis_marker.scale.z = 0.02
        axis_marker.color.r = 1.0
        axis_marker.color.g = 0.5
        axis_marker.color.b = 0.0
        axis_marker.color.a = 1.0

        control = InteractiveMarkerControl()
        control.always_visible = True
        control.markers.append(axis_marker)
        marker.controls.append(control)

        # Create a control for move and rotate interactions
        control = InteractiveMarkerControl()
        control.orientation.w = 1
        control.orientation.x = 1
        control.orientation.y = 0
        control.orientation.z = 0
        control.name = "move_rotate"
        control.interaction_mode = InteractiveMarkerControl.MOVE_ROTATE_3D
        marker.controls.append(control)

        # Add the menu control
        menu_control = InteractiveMarkerControl()
        menu_control.interaction_mode = InteractiveMarkerControl.MENU
        menu_control.description = "Options"
        menu_control.name = "menu_only_control"
        marker.controls.append(menu_control)

        self._marker_server.insert(marker, self.marker_feedback_cb)
        self._menu_handler.apply(self._marker_server, marker.name)
        self._marker_server.applyChanges()

        rospy.loginfo("Waiting for user input...")
        self._as.set_preempted()  # Allow the server to be preempted by default

    def marker_feedback_cb(self, feedback):
        rospy.loginfo("Marker moved or interacted with.")

    def process_feedback(self, feedback):
        rospy.loginfo("Menu command received.")
        if feedback.event_type == InteractiveMarkerFeedback.MENU_SELECT:
            if feedback.menu_entry_id == 1:  # 'Submit Grasp Pose' entry
                final_pose = self._marker_server.get("grasp_pose_marker").pose

                # Prepare the result to return
                result = SpecifyGraspPoseResult()
                result.grasp_pose.header = feedback.header
                result.grasp_pose.pose = final_pose

                rospy.loginfo("Submitting grasp pose: %s", result.grasp_pose)
                self._as.set_succeeded(result)
                rospy.loginfo("Grasp pose submitted successfully.")
            else:
                rospy.logwarn("Unknown menu entry selected.")

if __name__ == '__main__':
    rospy.init_node('specify_grasp_pose_server')
    server = SpecifyGraspPoseActionServer()
    rospy.spin()
