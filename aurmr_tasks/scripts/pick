#!/usr/bin/env python

import smach_ros

from smach import State, StateMachine

import rospy

from aurmr_tasks.common import states, motion, perception
from aurmr_tasks.common.tahoma import Tahoma
import aurmr_tasks.common.control_flow as cf


TARGET_BIN_ID = "001"
TARGET_OBJECT_ID = "XYZ"


def main():
    rospy.loginfo('Getting robot resources')
    rospy.init_node("pick")
    robot = Tahoma()

    simulation = rospy.get_param("~simulation", False)

    State.simulation = simulation

    pick_sm = StateMachine(["succeeded", "preempted", "aborted"],
                           input_keys=[],
                           output_keys=[])

    with pick_sm:
        cf.inject_userdata_auto("LOAD_TARGET_BIN_ID", "target_bin_id", TARGET_BIN_ID)
        cf.inject_userdata_auto("LOAD_TARGET_OBJECT_ID", "target_object_id", TARGET_OBJECT_ID)
        #StateMachine.add_auto("MOVE_TO_HIDE")
        StateMachine.add_auto("CAPTURE_EMPTY_BIN", perception.CaptureEmptyBin(), ['succeeded', 'preempted', 'aborted'])
        #StateMachine.add_auto("PROMPT_INSERT")
        StateMachine.add_auto("CAPTURE_OBJECT", perception.CaptureObject(), ['succeeded', 'preempted', 'aborted'])
        #StateMachine.add_auto("MOVE_TO_BIN_APPROACH")
        StateMachine.add_auto("LOAD_GRASP_POSE", perception.GetGraspPose(), ['succeeded', 'preempted', 'aborted'])
        #StateMachine.add_auto("MOVE_TO_GRASP_POSE")
        #StateMachine.add_auto("PROMPT_CLOSE")
        #StateMachine.add_auto("MOVE_TO_TOTE")
        #StateMachine.add_auto("PROMPT_OPEN")

    rospy.loginfo('Beginning pick SM')

    sis = smach_ros.IntrospectionServer('pick_sm', pick_sm, '/pick')
    sis.start()

    outcome = pick_sm.execute()

    rospy.spin()
    sis.stop()


if __name__ == '__main__':
    main()
