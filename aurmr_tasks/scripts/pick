#!/usr/bin/env python
import math
from std_msgs.msg import Header
import smach_ros

from smach import State, StateMachine

import rospy

from aurmr_tasks.common.tahoma import Tahoma
from aurmr_tasks.common import motion, perception
from aurmr_tasks import interaction
from geometry_msgs.msg import PoseStamped, Pose, Point, Quaternion
from tf_conversions import transformations
import aurmr_tasks.common.control_flow as cf
from aurmr_tasks.pod import load_sm

TARGET_BIN_ID = "001"
TARGET_OBJECT_ID = "XYZ"

DEG_TO_RAD = 2.0 * math.pi / 360.
HIDE_ANGLES = [4,31,-25,-44,0,37]
TOTE_APPROACH_ANGLES = [-182,-78,40,306,-270,270]

HIDE_ANGLES = [DEG_TO_RAD * ang for ang in HIDE_ANGLES]
TOTE_APPROACH_ANGLES = [DEG_TO_RAD * ang for ang in TOTE_APPROACH_ANGLES]

align_to_bin_orientation = transformations.quaternion_from_euler(1.57, 0, 1.57)
align_to_bin_quat = Quaternion(x=align_to_bin_orientation[0], y=align_to_bin_orientation[1], z=align_to_bin_orientation[2], w=align_to_bin_orientation[3])
I_QUAT = Quaternion(x=0, y=0, z=0, w=1)

BIN_APPROACH_POSE = PoseStamped(header=Header(frame_id="base_link"), pose=Pose(position=Point(x=.6046, y=.311,z=1.235), orientation=align_to_bin_quat))


def main():
    rospy.loginfo('Getting robot resources')
    rospy.init_node("pick")
    simulation = rospy.get_param("/use_sim_time", False)
    State.simulation = simulation
    robot = Tahoma(simulation)
    pick_sm = StateMachine(["succeeded", "preempted", "aborted"], input_keys=[], output_keys=[])

    picks = [["2f", "bottle"]]
    with pick_sm:
        cf.inject_userdata_auto("LOAD_PICKS", "picks", picks)

        StateMachine.add("ITERATE_STOWS", cf.IterateList("picks", "pick"),
                         {"repeat": "SPLAT_PICK", "done": "succeeded"})
        cf.splat_auto("SPLAT_PICK", "pick", ["target_bin_id", "target_object_id"])
        StateMachine.add_auto("GET_GRASP_POSE", perception.GetGraspPose(), ["succeeded"])
        StateMachine.add_auto("REMAP_GRASP_POSE", cf.input_to_output("grasp_pose", "pose"), ["succeeded"])
        StateMachine.add_auto("MOVE_TO_PRE_GRASP", motion.MoveEndEffectorToPose(robot), ["succeeded"])
        StateMachine.add_auto("ASK_FOR_GRIPPER_OPEN_TO_GRASP",
                              interaction.AskForHumanAction("Open the gripper using the teach pendant"), ["succeeded"])
        StateMachine.add_auto("MOVE_TO_GRASP", motion.MoveEndEffectorInLine(robot, (0, 0, 0.075)), ["succeeded", "aborted"])
        StateMachine.add_auto("GRASP", motion.CloseGripper(robot), ["succeeded"])
        StateMachine.add_auto("LIFT_OBJ", motion.MoveEndEffectorInLine(robot, (0, 0, 0.05), 'base_link'), ["succeeded", "aborted"])

        StateMachine.add_auto("RETRACT_ARM", motion.MoveEndEffectorInLine(robot, (0, 0, -0.25)), ["succeeded", "aborted"])
        StateMachine.add_auto("ADD_IN_HAND_COLLISION_BOX", motion.AddInHandCollisionGeometry(robot), ["succeeded"])
        StateMachine.add_auto("MOVE_TO_PRE_TOTE_POSE", motion.MoveToJointAngles(robot, TOTE_APPROACH_ANGLES), ["succeeded"])
        StateMachine.add_auto("ASK_FOR_GRIPPER_OPEN_TOTE_RELEASE", motion.OpenGripper(robot), ["succeeded"])

    stow_and_pick_sm = StateMachine(["succeeded", "preempted", "aborted"],
                           input_keys=[],
                           output_keys=[])

    with stow_and_pick_sm:
        StateMachine.add_auto("CLEAR_SCENE", motion.ClearCollisionGeometry(robot), ["succeeded"])
        StateMachine.add_auto("SETUP_COLLISION_SCENE", motion.AddPodCollisionGeometry(robot), ["succeeded"])
        StateMachine.add_auto("MOVE_TO_HIDE", motion.MoveToJointAngles(robot, HIDE_ANGLES), ["succeeded"])
        StateMachine.add_auto("LOAD_POD", load_sm([["2f", "bottle"]]), ["succeeded"])

        StateMachine.add_auto("PICK", pick_sm, ["succeeded"])

    rospy.loginfo('Beginning pick SM')

    sis = smach_ros.IntrospectionServer('pick_sm', stow_and_pick_sm, '/pick')
    sis.start()

    outcome = stow_and_pick_sm.execute()

    rospy.spin()
    sis.stop()


if __name__ == '__main__':
    main()
