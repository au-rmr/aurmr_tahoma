#!/usr/bin/env python
import math
from std_msgs.msg import Header
import smach_ros

from smach import State, StateMachine

import rospy

from aurmr_tasks.common.tahoma import Tahoma
from aurmr_tasks.common import motion, perception
from aurmr_tasks import interaction
from geometry_msgs.msg import PoseStamped, Pose, Point, Quaternion
from tf_conversions import transformations
import aurmr_tasks.common.control_flow as cf
from aurmr_tasks.pod import load_sm

from aurmr_tasks.common.motion import robust_move_to_offset
from aurmr_perception.util import vec_to_quat_msg, I_QUAT

TARGET_BIN_ID = "001"
TARGET_OBJECT_ID = "XYZ"

align_to_tote_orientation = transformations.quaternion_from_euler(math.pi, 0, 0)
align_to_bin_quat = vec_to_quat_msg(align_to_tote_orientation)

TOTE_APPROACH_POSE = PoseStamped(header=Header(frame_id="base_link"), pose=Pose(position=Point(x=.108, y=-.514,z=0.884), orientation=align_to_bin_quat))


def main():
    rospy.loginfo('Getting robot resources')
    rospy.init_node("pick")
    simulation = rospy.get_param("/use_sim_time", False)
    State.simulation = simulation
    robot = Tahoma(simulation)
    pick_sm = StateMachine(["succeeded", "preempted", "aborted"], input_keys=[], output_keys=[])
    with pick_sm:
        StateMachine.add_auto("CLEAR_SCENE", motion.ClearCollisionGeometry(robot), ["succeeded"])
        StateMachine.add_auto("SETUP_COLLISION_SCENE", motion.AddPodCollisionGeometry(robot), ["succeeded"])
        StateMachine.add_auto("MOVE_TO_GRASP", robust_move_to_offset(robot, (0, 0, 0.125)), ["succeeded", "aborted"])
        
    sis = smach_ros.IntrospectionServer('pick_sm', pick_sm, '/pick')
    sis.start()

    outcome = pick_sm.execute()

    rospy.spin()
    sis.stop()


if __name__ == '__main__':
    main()
