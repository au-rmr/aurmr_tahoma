#!/usr/bin/env python
import sys
"""
If not added to sys.path, then 
"from aurmr_tasks.common.tahoma import Tahoma", 
"from aurmr_perception.visualization import create_gripper_pose_markers", 
"from aurmr_tasks.pod import BIN_IDS"
will not be compiled 
"""
sys.path.append('/home/patorrad/aurmr_ws/src/aurmr_tahoma')
print("\n-------------------")
print(sys.path)
print("-------------------\n")

import math
import random
import std_msgs
import visualization_msgs.msg

import rospy
from smach import State

from aurmr_tasks.src.aurmr_tasks.common.tahoma import Tahoma
# from aurmr_tasks.common.tahoma import Tahoma

import numpy as np
from geometry_msgs.msg import PoseStamped, Pose, Point, Quaternion, TransformStamped
from tf2_msgs.msg import TFMessage
from gazebo_msgs.msg import LinkStates
from tf_conversions import transformations

from aurmr_perception.src.aurmr_perception.visualization import create_gripper_pose_markers
# from aurmr_perception.visualization import create_gripper_pose_markers

import copy
from aurmr_tasks.src.aurmr_tasks.pod import BIN_IDS
# from aurmr_tasks.pod import BIN_IDS

def main(TEST_MODE, BIN_POSE_RAND_N, dRoll, dPitch, dYaw):
    # add pod collision boxes to planning scene
    robot.add_pod_collision_geometry()
    # print('\n--------')
    # print(robot.scene.get_known_object_names())
    # print(robot.scene.get_object_poses(['back_frame']))
    # print('---------\n')
    # robot.remove_pod_collision_geometry()

    # for creating histogram to manually set manipulability threshold 
    file = open("manipData.txt", "w")

    dYaw *= np.pi / 180 * 1/2
    # Redefine dRoll to use sampling weight function  
    dRoll = dRoll/2 if dRoll != 0 else 0.001
    # Redefine dRoll to use sampling weight function
    dPitch = dPitch/2 if dPitch != 0 else 0.001

    POD_BIN_HEIGHTS = robot.pod_sizes["pod_bin_heights"]
    POD_BIN_FLAP_HEIGHT = robot.pod_sizes["pod_bin_flap_height"]
    POD_BRACE_WIDTH = robot.pod_sizes["pod_brace_width"]
    POD_BIN_WIDTH = POD_BRACE_WIDTH / 4
    POD_BRACE_FRAME_WIDTH = robot.pod_sizes["pod_brace_frame_width"]
    pod_bin_row_id = 0

    EEF_RADIUS = robot.end_effector["epick_end_effect_R"]

    ''' 
    x could be x,z pre-grasp position Cartesian coordinates relative to pod_bin reference frames 
    -POD_BIN_WIDTH/2 < x < POD_BIN_WIDTH/2 | -POD_BIN_HEIGHT/2 < z < POD_BIN_HEIGHT/2 
    angle: dRoll (defines change in z), dPitch (defines change in x)
    '''
    # Posititon Weight Sampling Function
    # Both functions are symetrical to each other, so that's why we use math.abs(x)
    # But, in general functions look like: 
    # If sgn(x) = (+) -> (1 + math.exp(-1)) / (1 + math.exp(+angle * (x - 1/angle)))
    # If sgn(x) = (-) -> (1 + math.exp(-1)) / (1 + math.exp(-angle * (x + 1/angle)))
    POSITION_WEIGHT_SAMPLING_FUNC = np.vectorize(lambda x, angle: (1 + math.exp(-1)) / (1 + math.exp(angle * (abs(x) - 1/angle))))

    # Orientation Weight Sampling Function
    # Both functions are the same:
    # But, in general functions look like:
    # If sgn(x) = (+) -> (1 - math.atan2(2 * (+angle) * math.exp(-angle * x), (1 + math.exp(-angle * x)**2)) / math.atan2(+angle, 2))
    # If sgn(x) = (-) -> (1 - math.atan2(2 * (-angle) * math.exp(+angle * x), (1 + math.exp(+angle * x)**2)) / math.atan2(-angle, 2))
    ORIENTATION_SAMPLING_FUNC = np.vectorize(lambda x, angle: sgn(-x) * (1 - math.atan2(2 * (-angle) * math.exp(angle * x), (1 + math.exp(angle * x)**2)) / math.atan2(-angle, 2)))

    # UR16e pose repeatability 0.05mm, from official technical specification
    UR16e_POSE_REPEATABILITY = 0.0005 
    pod_side_bin_half_width = (POD_BIN_WIDTH - POD_BRACE_FRAME_WIDTH - 2 * EEF_RADIUS)/2
    pod_midl_bin_half_width = (POD_BIN_WIDTH - 2 * EEF_RADIUS)/2
    # POSITIONS_X_SIDE_BIN and POSITIONS_X_MIDL_BIN has the same size, although not the same step
    positions_x_side_bin = np.linspace(start=-pod_side_bin_half_width, stop=pod_side_bin_half_width, num=int(pod_side_bin_half_width/UR16e_POSE_REPEATABILITY)) / pod_side_bin_half_width
    positions_x_midl_bin = np.linspace(start=-pod_midl_bin_half_width, stop=pod_midl_bin_half_width, num=int(pod_side_bin_half_width/UR16e_POSE_REPEATABILITY)) / pod_midl_bin_half_width

    # np.array (2, POSITIONS_X_NUM) of positions x for side (1st row) and middle (2nd row) bins
    position_sampling_weights_x = np.vstack((POSITION_WEIGHT_SAMPLING_FUNC(positions_x_side_bin, dPitch), 
                                            POSITION_WEIGHT_SAMPLING_FUNC(positions_x_midl_bin, dPitch)))
    # Normalize weights for each row
    position_sampling_weights_x /= np.sum(position_sampling_weights_x, axis=1).reshape(-1, 1)

    align_to_bin_orientation = transformations.quaternion_from_euler(-np.pi/2, 0, 0, axes='rxyz')
    # align_to_bin_orientation = transformations.quaternion_from_euler(0, 0, 0)
    align_to_bin_quat = Quaternion(x=align_to_bin_orientation[0], y=align_to_bin_orientation[1], z=align_to_bin_orientation[2], w=align_to_bin_orientation[3])

    BIN_APPROACH_POSES = []
    BIN_INNER_POSES = []
    for column_id, bin_id in enumerate(BIN_IDS, start=1):
        frame_name = f"pod_bin_{bin_id}"

        # change y value in pose, position to alter pre-grasp pose distance -> if we change this value need to change xoffset of 2nd cartesian waypoint 
        # (.9398 (POD_SIZE)/4-.003 (WALL_WIDTH))/2 -> x = .115
        # perturbed_quat = transformations.quaternion_from_euler(-np.pi/2 + np.random.uniform(-dRoll, dRoll), np.random.uniform(-dYaw, dYaw), np.random.uniform(-dPitch, dPitch))   
        # perturbed_quat_msg = Quaternion(x=perturbed_quat[0], y=perturbed_quat[1], z=perturbed_quat[2], w=perturbed_quat[3])

        # Use different heights for bins in different rows
        pod_bin_height = POD_BIN_HEIGHTS[pod_bin_row_id]
        pod_bin_row_id += 1 if column_id % 4 == 0 else 0

        # Set initial pose at the center* (pod height - pod flap height) of each (x,z) bin with perpendicular orientation (quat)
        # Take into account the brace frame width for side bins
        X_OFFSET = (POD_BIN_WIDTH - POD_BRACE_FRAME_WIDTH * int((column_id % 4 == 0) or (column_id % 4 == 1))) / 2 + POD_BRACE_FRAME_WIDTH * int(column_id % 4 == 1)
        # Adjust y-offset if necessary
        Y_OFFSET = .0
        Z_OFFSET = (pod_bin_height - POD_BIN_FLAP_HEIGHT) / 2 + POD_BIN_FLAP_HEIGHT
        
        BIN_APPROACH_POSES.append(PoseStamped(header=std_msgs.msg.Header(frame_id=frame_name), pose=Pose(position=Point(x=X_OFFSET, y=Y_OFFSET, z=Z_OFFSET), orientation=align_to_bin_quat)))
        # BIN_APPROACH_POSES.append(PoseStamped(header=std_msgs.msg.Header(frame_id=frame_name), pose=Pose(position=Point(x=.125, y=0.02, z=.07), orientation=align_to_bin_quat)))

        if column_id % 4 == 1:
            pod_bin_half_height = (pod_bin_height - 2 * EEF_RADIUS - POD_BIN_FLAP_HEIGHT)/2
            positions_z = np.arange(start=-pod_bin_half_height, stop=pod_bin_half_height, step=2*UR16e_POSE_REPEATABILITY) / pod_bin_half_height
            position_sampling_weights_z = POSITION_WEIGHT_SAMPLING_FUNC(positions_z, dRoll)
            # Give some extra priority to positions close to the bottom of bins (negative z)
            position_sampling_weights_z[:int(pod_bin_half_height/(2*UR16e_POSE_REPEATABILITY))] += np.linspace(start=1.0, stop=0.0, num=int(pod_bin_half_height/(2*UR16e_POSE_REPEATABILITY)))
            # Normalize weights
            position_sampling_weights_z /= np.sum(position_sampling_weights_z)

        # Generate random set of x with given weights position_sampling_weights_x over given range positions_x_side_bin/positions_x_midl_bin
        # Don't forget to multiply to pod_side_bin_half_width/pod_midl_bin_half_width as range positions_x_side_bin/positions_x_midl_bin lies within [-1, 1]
        if (column_id % 4 == 0) or (column_id % 4 == 1):
            rand_positions_x = np.random.choice(positions_x_side_bin, size=BIN_POSE_RAND_N, p=position_sampling_weights_x[0])
        else:
            rand_positions_x = np.random.choice(positions_x_midl_bin, size=BIN_POSE_RAND_N, p=position_sampling_weights_x[1])
        # Generate random set of z with given weights position_sampling_weights_z over given range positions_z
        # Don't forget to multiply to pod_bin_half_height as range positions_z lies within [-1, 1]
        rand_positions_z = np.random.choice(positions_z, size=BIN_POSE_RAND_N, p=position_sampling_weights_z)
        
        # Compute rand orientation (roll, pitch) according to ORIENTATION_SAMPLING_FUNC
        # Don't forgert to scale rand orientations to given max angle (dRoll, dPitch) as ORIENTATION_SAMPLING_FUNC lies within [-1, 1] 
        rand_orientation_pitch = ORIENTATION_SAMPLING_FUNC(rand_positions_x, dPitch) * dPitch * np.pi / 180
        rand_orientation_roll  = ORIENTATION_SAMPLING_FUNC(rand_positions_z, dRoll ) * dRoll * np.pi / 180
        # Don't forget to scale rand positions to given max size (positions_x_side_bin/positions_x_midl_bin, pod_bin_half_height) as they lie within [-1, 1]
        rand_positions_x *= pod_side_bin_half_width if ((column_id % 4 == 0) or (column_id % 4 == 1)) else pod_midl_bin_half_width
        rand_positions_z *= pod_bin_half_height

        for j in range(BIN_POSE_RAND_N):    
            perturbed_quat = transformations.quaternion_from_euler(-np.pi/2 + rand_orientation_roll[j], rand_orientation_pitch[j], np.random.uniform(-dYaw, dYaw), axes='rxyz')
            perturbed_quat_msg = Quaternion(x=perturbed_quat[0], y=perturbed_quat[1], z=perturbed_quat[2], w=perturbed_quat[3])
            BIN_INNER_POSES.append(PoseStamped(header=std_msgs.msg.Header(frame_id=frame_name), 
                                               pose=Pose(position=Point(x=X_OFFSET + rand_positions_x[j], y=Y_OFFSET, z=Z_OFFSET + rand_positions_z[j]), 
                                                         orientation=perturbed_quat_msg)))        

        # for j in range(bin_pose_randN):
            # Get some randomly offset poses in the bin to see if we'll be able to reach the inside
            # perturbed_quat = [align_to_bin_quat.x, align_to_bin_quat.y, align_to_bin_quat.z, align_to_bin_quat.w] + np.random.uniform(-.2, .2, 4)
            # perturbed_quat /= np.linalg.norm(perturbed_quat)
            # perturbed_quat_msg = Quaternion(x=perturbed_quat[0], y=perturbed_quat[1], z=perturbed_quat[2], w=perturbed_quat[3])
            # perturbed_quat = transformations.quaternion_from_euler(-np.pi/2 + np.random.uniform(-dRoll, dRoll), np.random.uniform(-dPitch, dPitch), np.random.uniform(-dYaw, dYaw), axes='rxyz')
            # perturbed_quat_msg = Quaternion(x=perturbed_quat[0], y=perturbed_quat[1], z=perturbed_quat[2], w=perturbed_quat[3])
            # BIN_INNER_POSES.append(PoseStamped(header=std_msgs.msg.Header(frame_id=frame_name), 
            #                                    pose=Pose(position=Point(x=X_OFFSET + random.uniform(-.1, .1), y=Y_OFFSET + random.uniform(-0,.1), z=Z_OFFSET + random.uniform(0, .05)), 
            #                                              orientation=perturbed_quat_msg)))
   
    # storing info variables
    # change flag to run manipulabilitytest
    reachability = True if not TEST_MODE else False
    reachability_pub = rospy.Publisher("~/reachability", visualization_msgs.msg.MarkerArray, queue_size=1, latch=True)
    REACHABLE_BIN_APPROACHES = [] # total poses = 572
    marker_colors = []

    #reachability test for bin inner poses
    if (reachability):
        print("Determining reachable bins...")

        for i, pose in enumerate(BIN_INNER_POSES):
            solution = robot.compute_ik(pose, rospy.Duration(0))
            if solution:
                print("pose " + str(i) +  " has solution")
                REACHABLE_BIN_APPROACHES.append(pose)
                marker_colors.append((0, 1, 0, 1))
            else:
                print("pose " + str(i) +  " not reachable")
                marker_colors.append((1, 0, 0, 1))

        print(len(REACHABLE_BIN_APPROACHES))
        print(len(BIN_INNER_POSES))

        ratio = len(REACHABLE_BIN_APPROACHES)/len(BIN_INNER_POSES)
        print("Reachability Score : " + str(ratio * 100))

        reachability_pub.publish(create_gripper_pose_markers(BIN_INNER_POSES, marker_colors))
        # return (ratio * 100)

    # manipulability test for bin approach poses
    else :
        print("Determining manipulable bins...")
        MANIPULABLE_APPROACHES = []

        # cartesian manipulability test for bin approach poses 
        counter = 0
        for approach in enumerate(BIN_APPROACH_POSES):
            print('-------------------------------------------')
            pose = copy.deepcopy(approach[1])
            manip = robot.compute_ik_cartesian(pose, pose.pose, rospy.Duration(0))

            # not reachable or no viable path to bin pose
            if (len(manip) == 0): 
                print(str(counter))
                marker_colors.append((1, 0, 0, 1)) #red
            else:
                print("cond num " + str(counter) +  " has a solution.") 
                REACHABLE_BIN_APPROACHES.append(approach)
                for i in manip:
                    file.write(str(i) + ", ")

                sorted = copy.deepcopy(manip)
                sorted.sort()
                
                # how skewed is the data towards infinitiy (singularity)? how safely manipulatable is the object? 
                manipThreshold = 400

                if (sorted[len(sorted)-1] >= manipThreshold): 
                    print("solution but above manipulability threshold")
                    marker_colors.append((1, 1, 1, 1)) #white
                else :
                    marker_colors.append((0, 1, 0, 1))  #green
                    MANIPULABLE_APPROACHES.append(approach)

            counter = counter + 1

        file.close()

        if (len(REACHABLE_BIN_APPROACHES) == 0) :
            print("no bins reachable")
        else :
            ratio = len(MANIPULABLE_APPROACHES)/len(REACHABLE_BIN_APPROACHES)
            print("Manipulability Score : " + str(ratio * 100))

            print("Manipulatable Points (Green) : " + str(len(MANIPULABLE_APPROACHES)))
            print("Reachable but not Manipulatable Points (White) : " + str(len(REACHABLE_BIN_APPROACHES) - len(MANIPULABLE_APPROACHES)))

        reachability_pub.publish(create_gripper_pose_markers(BIN_APPROACH_POSES, marker_colors))


    print("Published visualization data. Spinning to keep topic open.")
    rospy.spin() 

def sgn(x):
    if x < 0:
        return -1
    elif x > 0:
        return 1
    else:
        return 0

# def callback(data, arg):
#     pose_pub = arg
#     transforms = data.transforms
#     if transforms[0].header.frame_id == "base_link":
#         print(transforms[0].transform.translation.x)
#         transforms[0].transform.translation.x = 0.4
#         pose_pub.publish(transforms)
        
# def pose():
#     rospy.init_node("analyze_workspace")
#     pose_pub = rospy.Publisher('/tf_static', TFMessage, queue_size=1)
#     pose_sub = rospy.Subscriber("/tf_static", TFMessage, callback, (pose_pub))
#     rospy.spin()


def podPose_subCallback(TFmessage):
    for trnsfrm in TFmessage.transforms:
        if trnsfrm.child_frame_id == "pod_base_link":
            print("\ntf_static rostopic message: ")
            print(f"x: {trnsfrm.transform.translation.x}, y: {trnsfrm.transform.translation.y}\n")


# def transform_msg(x=0.6, y=0.4125):
#     transform = TransformStamped()
#     transform.header.stamp = rospy.Time.now()
#     transform.header.frame_id = 'base_link'
#     transform.child_frame_id = 'pod_base_link'
#     transform.transform.translation.x = x
#     transform.transform.translation.y = y
#     transform.transform.translation.z = 0.0
#     transform.transform.rotation.x = 0.0
#     transform.transform.rotation.y = 0.0
#     transform.transform.rotation.z = -0.706825181105366
#     transform.transform.rotation.w = 0.7073882691671998
#     return transform


# robot position relative to bin gets hardcoded in fc.launch file
if __name__ == '__main__':
    rospy.loginfo('Getting robot resources')
    rospy.init_node("analyze_workspace")
    simulation = rospy.get_param("/use_sim_time", False)
    State.simulation = simulation
    robot = Tahoma(simulation)
    bin_pose_randN = rospy.get_param("bin_pose_randN", 100) # Number of random pre-grasp poses for each bin
    dRoll = rospy.get_param("deltaRoll", 8) # Roll change upper-limit in random pre-grasp pose generation (degrees)
    dPitch = rospy.get_param("deltaPitch", 8) # Pitch change upper-limit in random pre-grasp pose generation (degrees)
    dYaw = rospy.get_param("deltaYaw", 360) # Yaw change upper-limit in random pre-grasp pose generation (degrees)
    
    test_mode = rospy.get_param("test_mode", 0) # test_mode = 0: Reachibility | test_mode = 1: Manipulability

    # print(rospy.get_param("/use_sim_time", False))
    # print(rospy.get_param('/pod_sim_description'))
    # rospy.init_node("analyze_workspace")
    # pose_sub = rospy.Subscriber("tf", TFMessage, callback)

    # podPose_pub = rospy.Publisher('/tf_static', TFMessage, queue_size=1)
    podPose_sub = rospy.Subscriber('/tf_static', TFMessage, podPose_subCallback)

    print(f"eef_link: {robot.eef_link}\n")

    # Pod positon in centimeters, won't work as pod pose already set by launch file
    # xStart = 60
    # xStop = 81
    # xStep = 5
    # yStart = 41
    # yStop = 46
    # yStep = 5
    # with open('successScores.txt', 'a') as file:
    #     for x in range(xStart, xStop, xStep):
    #         for y in range(yStart, yStop, yStep):
    #             tf_msg = TFMessage()
    #             tf_msg.transforms.append(transform_msg(x / 100, y / 100))
    #             podPose_pub.publish(tf_msg)
    #             file.write(str(x / 100) + " " + str(y / 100) + " ")
    #             file.write(str(round(main(), 4)) + "\n")
    
    # Tested Currently
    # pod_x = rospy.get_param('pod_x')
    # pod_y = rospy.get_param('pod_y')
    # with open('successScores.txt', 'a') as file:
    #     file.write(str(pod_x) + " " + str(pod_y) + " " + str(round(main(), 4)) + "\n")

    main(test_mode, bin_pose_randN, dRoll, dPitch, dYaw)
