#!/usr/bin/env python

import smach_ros

from smach import State, StateMachine

import rospy

from aurmr_tasks.common.tahoma import Tahoma
from aurmr_tasks.common import perception, motion
import aurmr_tasks.common.control_flow as cf
from aurmr_tasks.pod import load_sm


def main():
    rospy.init_node("stow_and_detect_grasps")
    rospy.loginfo('Getting robot resources')
    simulation = rospy.get_param("/use_sim_time", False)
    State.simulation = simulation
    robot = Tahoma(simulation)

    pick_sm = StateMachine(["succeeded", "preempted", "aborted"],
                           input_keys=[],
                           output_keys=[])

    with pick_sm:
        StateMachine.add_auto("MOVE_TO_HIDE", motion.MoveToJointAngles(robot, "hide"), ["succeeded"])
        StateMachine.add_auto("LOAD_POD", load_sm([["2f", "bottle"]]), ["succeeded"])
        cf.inject_userdata_auto("LOAD_TARGET_BIN_ID", "target_bin_id", "2f")
        cf.inject_userdata_auto("LOAD_TARGET_OBJECT_ID", "target_object_id", "bottle")
        StateMachine.add_auto("GET_GRASP_POSE", perception.GetGraspPose(), ["succeeded"])
        StateMachine.add_auto("REMAP_GRASP_POSE", cf.input_to_output("grasp_pose", "pose"), ["succeeded"])

    rospy.loginfo('Beginning state machine')

    sis = smach_ros.IntrospectionServer('pick_sm', pick_sm, '/pick')
    sis.start()

    outcome = pick_sm.execute()

    rospy.spin()
    sis.stop()


if __name__ == '__main__':
    main()
