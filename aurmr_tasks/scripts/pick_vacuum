#!/usr/bin/env python
import math
from std_msgs.msg import Header
import smach_ros

from smach import State, StateMachine

import rospy

from aurmr_tasks.common.tahoma import Tahoma
from aurmr_tasks.common import motion, perception
from aurmr_tasks import interaction
from geometry_msgs.msg import PoseStamped, Pose, Point, Quaternion
from tf_conversions import transformations
import aurmr_tasks.common.control_flow as cf
from aurmr_tasks.pod import load_sm

from aurmr_tasks.common.motion import robust_move_to_offset, grasp_move_to_offset
from aurmr_perception.util import vec_to_quat_msg, I_QUAT

TARGET_BIN_ID = "001"
TARGET_OBJECT_ID = "XYZ"

align_to_tote_orientation = transformations.quaternion_from_euler(math.pi, 0, 0)
align_to_bin_quat = vec_to_quat_msg(align_to_tote_orientation)

quat_obj = Quaternion(x=0, y=0.707, z=0, w=0.707)
TOTE_APPROACH_POSE = PoseStamped(header=Header(frame_id="base_link"), pose=Pose(position=Point(x=0.0, y=-0.45,z=1.1), orientation=align_to_bin_quat ))

# TOTE_APPROACH_POSE = PoseStamped(header=Header(frame_id="base_link"), pose=Pose(position=Point(x=.108, y=-.514,z=0.884), orientation=align_to_bin_quat))


def main():
    rospy.loginfo('Getting robot resources')
    rospy.init_node("pick")
    pose_pub_test = rospy.Publisher("/tote_drop", PoseStamped, queue_size=5, latch=True)
    TOTE_APPROACH_POSE.header.stamp = rospy.Time.now()
    pose_pub_test.publish(TOTE_APPROACH_POSE)
    simulation = rospy.get_param("/use_sim_time", False)
    State.simulation = simulation
    robot = Tahoma(simulation)
    pick_sm = StateMachine(["succeeded", "preempted", "aborted"], input_keys=[], output_keys=[])

    # stows = [["4f", "mouthwash"], ["4f", "soda"], ["4f", "syrup"]]
    stows = [["3f", "mouthwash"], ['3f', 'lysol'], ['2f', 'box']]
    picks = [["3f", "lysol"], ['2f', 'can3'], ['3f', 'lysol']]
    with pick_sm:
        cf.inject_userdata_auto("LOAD_PICKS", "picks", picks)

        StateMachine.add("ITERATE_PICKS", cf.IterateList("picks", "pick"),
                         {"repeat": "SPLAT_PICK", "done": "succeeded"})
        cf.splat_auto("SPLAT_PICK", "pick", ["target_bin_id", "target_object_id"])
        StateMachine.add_auto("GET_GRASP_POSE", perception.GetGraspPose(robot.tf2_buffer, pre_grasp_offset=.125), ["succeeded"])
        StateMachine.add_auto("REMAP_PRE_GRASP_POSE", cf.input_to_output("pre_grasp_pose", "pose"), ["succeeded"])
        StateMachine.add_auto("MOVE_TO_PRE_GRASP", motion.MoveEndEffectorToPose(robot), ["succeeded"])
        StateMachine.add_auto("OPEN_BEFORE_GRASP", motion.OpenGripper(robot), ["succeeded"])
        # StateMachine.add_auto("GRASP", motion.CloseGripper(robot, return_before_done=True), ["succeeded"])
        StateMachine.add_auto("MOVE_TO_GRASP", grasp_move_to_offset(robot, (0, 0, 0.170)), ["succeeded", "aborted"])
        StateMachine.add_auto("LIFT_OBJ", robust_move_to_offset(robot, (0, 0, 0.05), 'base_link'), ["succeeded", "aborted"])
        StateMachine.add_auto("RETRACT_ARM", robust_move_to_offset(robot, (0, 0, -0.25)), ["succeeded", "aborted"])
        StateMachine.add_auto("ADD_IN_HAND_COLLISION_BOX", motion.AddInHandCollisionGeometry(robot), ["succeeded"])
        StateMachine.add_auto("MOVE_TO_PRE_TOTE_POSE", motion.MoveToJointAngles(robot, "drop_hide"), ["succeeded"])
        StateMachine.add_auto("ASK_FOR_GRIPPER_OPEN_TOTE_RELEASE", motion.OpenGripper(robot), ["succeeded"],  {"succeeded": "ITERATE_PICKS"})
        StateMachine.add_auto("POST_PICK", perception.PickObject(), ["aborted"], {"succeeded": "ITERATE_PICKS"})

    stow_and_pick_sm = StateMachine(["succeeded", "preempted", "aborted"])

    with stow_and_pick_sm:
        StateMachine.add_auto("CLEAR_SCENE", motion.ClearCollisionGeometry(robot), ["succeeded"])
        StateMachine.add_auto("SETUP_COLLISION_SCENE", motion.AddPodCollisionGeometry(robot), ["succeeded"])
        StateMachine.add_auto("MOVE_TO_HIDE", motion.MoveToJointAngles(robot, "drop_hide"), ["succeeded"])
        StateMachine.add_auto("LOAD_POD", load_sm(stows), ["succeeded"])

        StateMachine.add_auto("PICK", pick_sm, ["succeeded"])

    rospy.loginfo('Beginning pick SM')

    sis = smach_ros.IntrospectionServer('pick_sm', stow_and_pick_sm, '/pick')
    sis.start()

    outcome = stow_and_pick_sm.execute()

    rospy.spin()
    sis.stop()


if __name__ == '__main__':
    main()
