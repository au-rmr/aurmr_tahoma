#!/usr/bin/env python

import smach_ros
import std_msgs

from smach import State, StateMachine

import rospy

from aurmr_tasks.common import states
from aurmr_tasks.common.tahoma import Tahoma
import aurmr_tasks.common.control_flow as cf
from aurmr_tasks.common import motion
import numpy as np
from geometry_msgs.msg import PoseStamped, Pose, Point, Quaternion
from tf_conversions import transformations

BIN_APPROACH_POSES = []


def main():
    rospy.loginfo('Getting robot resources')
    rospy.init_node("visit_all_bins")
    robot = Tahoma()

    align_to_bin_orientation = transformations.quaternion_from_euler(-1.57, 0, 0)
    align_to_bin_quat = Quaternion(x=align_to_bin_orientation[0], y=align_to_bin_orientation[1], z=align_to_bin_orientation[2], w=align_to_bin_orientation[3])
    for i in range(4):
        for letter in "abcdefghijklm":
            frame_name = f"pod_bin_{i+1}{letter}"
            BIN_APPROACH_POSES.append(PoseStamped(header=std_msgs.msg.Header(frame_id=frame_name), pose=Pose(position=Point(x=.125, y=-.25,z=.05), orientation=align_to_bin_quat)))
    print("Determining approachable bins...")
    REACHABLE_BIN_APPROACHES = []
    for i, pose in enumerate(BIN_APPROACH_POSES):
        solution = robot.compute_ik(pose, rospy.Duration(.1))
        if solution:
            REACHABLE_BIN_APPROACHES.append(pose)

    print(f"{len(REACHABLE_BIN_APPROACHES)} of {len(BIN_APPROACH_POSES)} bins are approachable")
    simulation = rospy.get_param("~simulation", False)

    State.simulation = simulation

    pick_sm = StateMachine(["succeeded", "preempted", "aborted"],
                           input_keys=[],
                           output_keys=[])

    with pick_sm:
        StateMachine.add_auto("CLEAR_SCENE", motion.ClearCollisionGeometry(robot), ["succeeded"])
        StateMachine.add_auto("SETUP_COLLISION_SCENE", motion.AddPodCollisionGeometry(robot), ["succeeded"])
        cf.inject_userdata_auto("LOAD_POSES", "poses", REACHABLE_BIN_APPROACHES)
        StateMachine.add("PICK_POSE", cf.IterateList("poses", "pose"),
                         {"repeat": "MOVE_TO_POSE", "done": "aborted"})
        StateMachine.add_auto('MOVE_TO_POSE',
                              motion.MoveEndEffectorToPose(robot),
                              ['succeeded',],
                              {
                                  # NOTE: This fails most of the time due to tight position tolerances. Ignore for now
                                  'aborted': 'MOVE_TO_POSE'
                              })
        StateMachine.add_auto("POKE_BIN", motion.MoveEndEffectorInLineInOut(robot), ['succeeded', 'preempted', 'aborted'])
        StateMachine.add("PAUSE", states.Wait(2), {'succeeded': "PICK_POSE"})


    # Create top state machine
    sm = StateMachine(outcomes=['succeeded', "preempted", 'aborted'])

    # Endless loop
    with sm:
        StateMachine.add('PLAY_POSE_SEQUENCE', pick_sm, {"succeeded": "PLAY_POSE_SEQUENCE", "aborted": "PLAY_POSE_SEQUENCE"})

    rospy.loginfo('Beginning pick SM')

    sis = smach_ros.IntrospectionServer('pick_sm', sm, '/pick')
    sis.start()

    outcome = sm.execute()

    rospy.spin()
    sis.stop()


if __name__ == '__main__':
    main()
