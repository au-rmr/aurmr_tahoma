#!/usr/bin/env python
import rospy
import std_msgs
from std_msgs.msg import String, Float64MultiArray, MultiArrayDimension, Bool
from geometry_msgs.msg import PoseStamped, Pose, Point, Quaternion
from scipy.spatial.transform import Rotation as R
import numpy as np

tof_topic = 'tof_sensors'
GOAL_POSE = '/goal_pose'
ACTIVATE_CONTROL = '/activate_control'
STROM_RESULT = '/storm_info/result'

goal_pub, AC_pub, goal_finished = None, None, None

def move_arm_storm(pose):
    global goal_pub, AC_pub, goal_finished
    goal_pub.publish(pose)
    AC_pub.publish(Bool(data=True))
    goal_finished = False
    time_out, steps = 50, 0.0
    while True:#not(goal_finished):
        # print("The robot is still moving to: ", pose)
        goal_pub.publish(pose)
        AC_pub.publish(Bool(data=True))
        # print("Goal has not reached yet")
        rospy.sleep(0.1)
        steps = steps + 0.1
        if steps>time_out:
            rospy.loginfo("Time_out in normal movement")
            # early_stop = True
            break

    AC_pub.publish(Bool(data=False))

def storm_result_callback(msg):
    global goal_pub, AC_pub, goal_finished
    goal_finished = msg.data

if __name__ == '__main__':
    #global goal_pub, AC_pub
    rospy.init_node('ToF_demo')
    goal_pub = rospy.Publisher(GOAL_POSE, PoseStamped, queue_size=1)
    AC_pub = rospy.Publisher(ACTIVATE_CONTROL, Bool, queue_size=1)
    rospy.Subscriber(STROM_RESULT, Bool, storm_result_callback)
    # move to pre-grasp pose
    r = R.from_euler('zyx', [0, 0, 0], degrees=True)
    tq = r.as_quat() # x, y, z, w
    demo_grasp_pose = PoseStamped()
    demo_grasp_pose.header=std_msgs.msg.Header(frame_id='')
    demo_grasp_pose.pose.orientation = Quaternion(tq[3], tq[0], tq[1], tq[2]) # w, x, y, z
    demo_grasp_pose.pose.position = Point(x=0.40, y=0.174, z=0.774)
    print('move to pre grasp ctrl')
    move_arm_storm(demo_grasp_pose)
    print('done')

    
    