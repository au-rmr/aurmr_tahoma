#!/usr/bin/env python
import math
from multiprocessing.connection import wait
from std_msgs.msg import Header, String
import smach_ros

from smach import State, StateMachine

from typing import List
import rospy

from aurmr_tasks.common.tahoma import Tahoma
from aurmr_tasks.common import motion, perception, planning_scene
from geometry_msgs.msg import PoseStamped, Pose, Point, Quaternion
from tf_conversions import transformations
import aurmr_tasks.common.control_flow as cf
from aurmr_tasks.pod import load_sm

from aurmr_tasks.srv import StowRequest, PickRequest, StowRequestRequest, PickRequestRequest, PickRequestResponse, MultiplePickRequest, MultiplePickRequestRequest
from aurmr_tasks.msg import PickStatus
from aurmr_perception.util import vec_to_quat_msg, I_QUAT
from aurmr_tasks.common.states import Wait
from aurmr_tasks.common.hri import UserPromptForRetry


from queue import Empty, Queue



class PickStowQueue:
    def __init__(self, pick_sm) -> None:
        self.stow_service = rospy.Service('~stow', StowRequest, self.stow_cb)
        self.pick_service = rospy.Service('~pick', PickRequest, self.pick_cb)
        self.multi_pick_service = rospy.Service('~multiple_pick', MultiplePickRequest, self.multiple_pick_cb)
        self.pick_status_pub = rospy.Publisher("~pick_status", PickStatus, queue_size=1, latch=True)
        self.task_queue = Queue()
        self.result_queue = Queue()
        # We'll use this handle to monitor execution status
        self.pick_sm = pick_sm

    def stow_cb(self, request: StowRequestRequest):
        rospy.loginfo("STOW REQUEST: " + str(request))
        self.task_queue.put_nowait(request)
        result = None
        while result is None and not rospy.is_shutdown():
            try:
                result = self.result_queue.get(False)
            except Empty:
                rospy.sleep(.1)
        return {"outcome": result}

    def multiple_pick_cb(self, requests: MultiplePickRequestRequest):
        for i in range(len(requests.bin_ids)):
            r = PickRequestRequest()
            r.object_id = requests.object_ids[i]
            r.bin_id = requests.bin_ids[i]
            r.object_asin = requests.object_asins[i]
            r.object_name = requests.object_names[i]
            self.task_queue.put_nowait(r)
        # We don't want to leave the service call hanging for multiple minutes,
        # so we don't report outcomes with multi pick
        return True

    def pick_cb(self, request: PickRequestRequest):
        request_data = dict(object_id=request.object_id, bin_id=request.bin_id, object_asin=request.object_asin, object_name=request.object_name)
        self.pick_status_pub.publish(**request_data)
        self.task_queue.put_nowait(request)
        result = None
        while result is None and not rospy.is_shutdown():
            try:
                result = self.result_queue.get(False)
            except Empty:
                # You can publish the latest status information here
                # self.pick_status_pub.publish(**request_data, status=self.pick_sm.userdata._data)
                rospy.sleep(.1)
        if result is None:
            result = PickRequestResponse.OUTCOME_UNKNOWN_FAILURE
        return {"outcome": result}


class WaitForPickStow(State):
    def __init__(self, task_queue):
        State.__init__(self, outcomes=['pick', 'stow', 'done'], output_keys=["request"])
        self.task_queue = task_queue

    def execute(self, userdata):
        task = None
        while task is None and not rospy.is_shutdown():
            try:
                task = self.task_queue.task_queue.get(False)
            except Empty:
                rospy.sleep(.1)
            rospy.sleep(.1)

        if task is None:
            # We must be getting shutdown
            return "done"

        userdata["request"] = [task.bin_id, task.object_id, task.object_asin]
        print(task, type(task))
        if isinstance(task, StowRequestRequest):
            return "stow"
        elif isinstance(task, PickRequestRequest):
            return "pick"
        else:
            return "done"

class ReportPickStowOutcome(State):
    def __init__(self, task_queue):
        State.__init__(self, outcomes=['succeeded'], input_keys=["status"])
        self.task_queue = task_queue

    def execute(self, userdata):
        self.task_queue.result_queue.put_nowait(userdata["status"])
        return "succeeded"


def main():
    rospy.init_node("aurmr_demo")
    simulation = rospy.get_param("/use_sim_time", False)
    State.simulation = simulation
    robot = Tahoma(simulation)
    demo_sm = StateMachine(["done"], input_keys=[], output_keys=[])
    pick_sm = StateMachine(["done"], input_keys=["request"], output_keys=["status"])
    pick_success_cleanup_sm = StateMachine(["succeeded"], input_keys=['target_bin_id', 'target_object_id', 'target_object_asin'], output_keys=[])
    pick_retry_sm = StateMachine(["retry", "continue"], input_keys=['target_bin_id', 'target_object_id', 'target_object_asin', 'grasp_pose'], output_keys=['grasp_pose'])

    stow_sm = StateMachine(["done"], input_keys=["request"], output_keys=["status"])
    task_queue = PickStowQueue(pick_sm)

    with demo_sm:

        with pick_sm:
            # These are pre-terminating states that note what went wrong in the userdata. This avoids
            # encoding the same information in an explosion of named state transitions
            cf.splat_auto("SPLAT_PICK", "request", ["target_bin_id", "target_object_id", "target_object_asin"])
            # StateMachine.add_auto("ADD_IN_HAND_COLLISION_BOX_PRE_GRASP", planning_scene.AddInHandCollisionGeometry(robot), ["succeeded", "aborted"])
            StateMachine.add("GET_GRASP_POSE", perception.GetGraspPose(robot.tf2_buffer, pre_grasp_offset=.015),
                            {"succeeded": "REMAP_PRE_GRASP_POSE", "aborted":"NOTE_PASS", "preempted":"NOTE_PASS"})
            cf.inject_userdata("NOTE_PASS", "done", "status", PickRequestResponse.OUTCOME_PERCEPTION_FAILURE)

            StateMachine.add_auto("REMAP_PRE_GRASP_POSE", cf.input_to_output("pre_grasp_pose", "pose"), ["succeeded"])
            StateMachine.add_auto("CLEAR_SCENE_PREMOVE", planning_scene.ClearCollisionGeometry(robot), ["succeeded", "aborted"])
            StateMachine.add_auto("SETUP_COLLISION_SCENE_PREMOVE", planning_scene.AddFullPodCollisionGeometry(robot), ["succeeded", "aborted"])

            StateMachine.add("MOVE_TO_PRE_GRASP", motion.MoveEndEffectorToPoseManipulable(robot), {"succeeded": "CLEAR_SCENE_PREGRASP", "preempted": "NOTE_PREEMPTION", "aborted": "NOTE_PLANNING_FAILURE"})
            cf.inject_userdata("NOTE_PLANNING_FAILURE", "done", "status", PickRequestResponse.OUTCOME_PLANNING_FAILURE)
            StateMachine.add_auto("CLEAR_SCENE_PREGRASP", planning_scene.ClearCollisionGeometry(robot), ["succeeded", "aborted"])
            StateMachine.add_auto("SETUP_COLLISION_SCENE_PREGRASP", planning_scene.AddPartialPodCollisionGeometry(robot), ["succeeded", "aborted"])
            StateMachine.add_auto("MOVE_TO_GRASP", motion.grasp_move_to_offset(robot, (0, 0, 0.5)), ["succeeded", "aborted", "preempted"])
            StateMachine.add_auto("LIFT_OBJ", motion.robust_move_to_offset(robot, (0, 0, 0.035), 'base_link'), ["succeeded", "aborted", "preempted"])
            StateMachine.add_auto("ADJUST_RIGHT_IF_COLUMN_1", motion.AdjustRightIfColumn1(robot, (0, 0.05, 0)), ["succeeded", "aborted", "pass"])
            StateMachine.add_auto("ADJUST_LEFT_IF_COLUMN_4", motion.AdjustLeftIfColumn4(robot, (0, -0.05, 0)), ["succeeded", "aborted", "pass"])
            StateMachine.add_auto("RETRACT_ARM", motion.robust_move_to_offset(robot, (0, 0, -0.3)), ["succeeded", "aborted", "preempted"])
            StateMachine.add_auto("CLEAR_SCENE_POSTGRASP", planning_scene.ClearCollisionGeometry(robot), ["succeeded", "aborted"])
            StateMachine.add_auto("SETUP_COLLISION_SCENE_POSTGRASP", planning_scene.AddFullPodCollisionGeometry(robot), ["succeeded", "aborted"])
            # StateMachine.add_auto("ADD_IN_HAND_COLLISION_BOX", planning_scene.AddInHandCollisionGeometry(robot), ["succeeded", "aborted"])
            # StateMachine.add("MOVE_TO_PRE_TOTE_POSE", motion.MoveToJointAngles(robot, "drop_hide"),
            #                     {"succeeded": "PICTURE_WAIT", "aborted": "MOVE_INTO_JOINT_LIMITS"})

            StateMachine.add_auto("MOVE_TO_PRE_TOTE_POSE", motion.MoveToJointAngles(robot, "drop_hide"), ["succeeded", "aborted"])
            StateMachine.add("CHECK_FOR_GRIPPER_ITEM", motion.CheckGripperItem(robot),
                            {"item_detected": "NOTE_SUCCESS", "no_item_detected": "NOTE_MANIPULATION_FAILURE_AND_RETRY"})
            cf.inject_userdata("NOTE_SUCCESS", "POST_PICK_SUCCESS_CLEANUP", "status", PickRequestResponse.OUTCOME_SUCCESS)
            cf.inject_userdata("NOTE_MANIPULATION_FAILURE_AND_RETRY", "RETRY", "status", PickRequestResponse.OUTCOME_MANIPULATION_FAILURE)
            cf.inject_userdata("NOTE_PREEMPTION", "done", "status", PickRequestResponse.OUTCOME_PREEMPTED)


            with pick_success_cleanup_sm:
                StateMachine.add_auto("BLOW_OFF_GRIPPER", motion.BlowOffGripper(robot, return_before_done=True), ["succeeded", "aborted", "preempted"])
                StateMachine.add_auto("UNBLOCK_VIEW", motion.MoveToJointAngles(robot, "hide"), ["succeeded", "aborted"])
                StateMachine.add_auto("PICTURE_WAIT", Wait(2), ["succeeded"])
                StateMachine.add_auto("POST_PICK_UPDATE_MASKS", perception.PickObject(), ["succeeded", "preempted", "aborted"])
                StateMachine.add("ASK_FOR_GRIPPER_OPEN_TOTE_RELEASE", motion.OpenGripper(robot, return_before_done=True), {"succeeded": "succeeded", "preempted": "succeeded", "aborted": "succeeded"})

            with pick_retry_sm:
                StateMachine.add_auto("BLOW_OFF_GRIPPER", motion.BlowOffGripper(robot, return_before_done=True), ["succeeded", "aborted", "preempted"])
                StateMachine.add_auto("UNBLOCK_VIEW", motion.MoveToJointAngles(robot, "hide"), ["succeeded", "aborted"])
                StateMachine.add_auto("PICTURE_WAIT", Wait(2), ["succeeded"])
                StateMachine.add_auto("UPDATE_BIN_MASKS", perception.UpdateBin(), ["succeeded", "preempted", "aborted"])
                StateMachine.add('USER_PROMPT_FOR_RETRY', UserPromptForRetry(rospy.get_param("bin_bounds"), robot.tf2_buffer, timeout_connection_secs=1.0), {"retry": "REMAP_GRASP", "continue": "continue"})
                cf.remap_auto("REMAP_GRASP", "human_grasp_pose", "grasp_pose")
                cf.remap("REMAP_PRE_GRASP", "human_pre_grasp_pose", "pre_grasp_pose", {"succeeded": "retry"})

            StateMachine.add("POST_PICK_SUCCESS_CLEANUP", pick_success_cleanup_sm, {"succeeded": "done"})
            StateMachine.add("RETRY", pick_retry_sm, {'retry': 'CLEAR_SCENE_PREMOVE', 'continue': 'done'})


        with stow_sm:
            cf.splat_auto("SPLAT_STOW", "request", ["target_bin_id", "target_object_id", "target_object_asin"])
            StateMachine.add("MOVE_TO_HIDE", motion.MoveToJointAngles(robot, "hide"),
                            {"succeeded": "PRE_PERCEIVE", "aborted": "STOW_FAILED"})
            #TODO: Check that this state actually does anything
            StateMachine.add("PRE_PERCEIVE", perception.CaptureEmptyBin(),
                            {"succeeded": "POST_PERCEIVE", "aborted": "STOW_FAILED", "preempted": "STOW_FAILED"})
            # StateMachine.add("ASK_FOR_BIN_LOAD", interaction.AskForHumanAction(),
            #                 {"succeeded": "POST_PERCEIVE", "aborted": "STOW_FAILED"})
            StateMachine.add("POST_PERCEIVE", perception.StowObject(),
                            {"succeeded": "STOW_SUCCESS", "aborted": "STOW_FAILED", "preempted": "STOW_FAILED"})
            cf.inject_userdata("STOW_FAILED", "done", "status", False)
            cf.inject_userdata("STOW_SUCCESS", "done", "status", True)

        StateMachine.add_auto("CLEAR_SCENE", planning_scene.ClearCollisionGeometry(robot), ["succeeded", "aborted"])
        StateMachine.add_auto("SETUP_COLLISION_SCENE", planning_scene.AddFullPodCollisionGeometryDropHide(robot), ["succeeded", "aborted"])
        StateMachine.add_auto("MOVE_TO_HIDE", motion.MoveToJointAngles(robot, "hide"),  ["succeeded"], {"aborted": "done"})
        StateMachine.add_auto("CAPTURE_EMPTY_POD", perception.CaptureEmptyPod(),  ["succeeded"], {"aborted": "done"})
        StateMachine.add("WAIT_FOR_COMMAND", WaitForPickStow(task_queue), {"stow": "STOW", "pick":"PICK"})
        StateMachine.add("PICK", pick_sm, {"done": "REPORT_OUTCOME"})
        StateMachine.add("STOW", stow_sm, {"done": "REPORT_OUTCOME"})
        StateMachine.add("REPORT_OUTCOME", ReportPickStowOutcome(task_queue), {"succeeded": "WAIT_FOR_COMMAND"})

    rospy.loginfo('Beginning demo SM')

    sis = smach_ros.IntrospectionServer('demo_sm', demo_sm, '/pick')
    sis.start()

    print("State machine introspection server started...")

    outcome = demo_sm.execute()
    sis.stop()


if __name__ == '__main__':
    main()
