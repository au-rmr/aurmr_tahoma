#!/usr/bin/env python

import smach_ros

from smach import State, StateMachine

from typing import List
import rospy

from aurmr_tasks.common.tahoma import Tahoma
from aurmr_tasks.common import motion, perception, planning_scene

import aurmr_tasks.common.control_flow as cf
from aurmr_tasks.pod import load_sm

from aurmr_tasks.common.states import Wait, RecordTime
from aurmr_tasks.common.hri import UserPromptForRetry
from aurmr_tasks.task_queue import PickStowQueue, WaitForPickStow, ReportPickStowOutcome



def main():
    rospy.init_node("aurmr_demo")
    simulation = rospy.get_param("/use_sim_time", False)
    State.simulation = simulation
    robot = Tahoma(simulation)
    demo_sm = StateMachine(["done"], input_keys=[], output_keys=[])
    pick_sm = StateMachine(["done"], input_keys=["request"], output_keys=["status"])
    pick_success_cleanup_sm = StateMachine(["succeeded"], input_keys=['target_bin_id', 'target_object_id', 'target_object_asin', "start_time"], output_keys=[])
    pick_retry_sm = StateMachine(["retry", "continue"], input_keys=['target_bin_id', 'target_object_id', 'target_object_asin', 'grasp_pose', "start_time"], output_keys=['grasp_pose'])

    stow_sm = StateMachine(["done"], input_keys=["request"], output_keys=["status"])
    task_queue = PickStowQueue()

    with demo_sm:

        with pick_sm:
            StateMachine.add_auto("RECORD_TIME", RecordTime(), ["succeeded"])
            cf.splat_auto("SPLAT_PICK", "request", ["target_bin_id", "target_object_id", "target_object_asin"])
            # StateMachine.add_auto("ADD_IN_HAND_COLLISION_BOX_PRE_GRASP", planning_scene.AddInHandCollisionGeometry(robot), ["succeeded", "aborted"])
            StateMachine.add("GET_GRASP_POSE", perception.GetGraspPose(robot.tf2_buffer, pre_grasp_offset=.015),
                            {"succeeded": "REMAP_PRE_GRASP_POSE", "aborted":"RETRY", "preempted":"RETRY"})

            StateMachine.add_auto("REMAP_PRE_GRASP_POSE", cf.input_to_output("pre_grasp_pose", "pose"), ["succeeded"])
            StateMachine.add_auto("CLEAR_SCENE_PREMOVE", planning_scene.ClearCollisionGeometry(robot), ["succeeded", "aborted"])
            StateMachine.add_auto("SETUP_COLLISION_SCENE_PREMOVE", planning_scene.AddFullPodCollisionGeometry(robot), ["succeeded", "aborted"])

            StateMachine.add_auto("MOVE_TO_PRE_GRASP", motion.MoveEndEffectorToPoseManipulable(robot), ["succeeded", "preempted"], {"aborted": "MOVE_TO_PRE_TOTE_POSE"})
            StateMachine.add_auto("CLEAR_SCENE_PREGRASP", planning_scene.ClearCollisionGeometry(robot), ["succeeded", "aborted"])
            StateMachine.add_auto("SETUP_COLLISION_SCENE_PREGRASP", planning_scene.AddPartialPodCollisionGeometry(robot), ["succeeded", "aborted"])
            StateMachine.add_auto("MOVE_TO_GRASP", motion.grasp_move_to_offset(robot, (0, 0, 0.5)), ["succeeded", "aborted", "preempted"])
            StateMachine.add_auto("LIFT_OBJ", motion.robust_move_to_offset(robot, (0, 0, 0.035), 'base_link'), ["succeeded", "aborted", "preempted"])
            StateMachine.add_auto("ADJUST_RIGHT_IF_COLUMN_1", motion.AdjustRightIfColumn1(robot, (0, 0.05, 0)), ["succeeded", "aborted", "pass"])
            StateMachine.add_auto("ADJUST_LEFT_IF_COLUMN_4", motion.AdjustLeftIfColumn4(robot, (0, -0.05, 0)), ["succeeded", "aborted", "pass"])
            StateMachine.add_auto("RETRACT_ARM", motion.robust_move_to_offset(robot, (0, 0, -0.3)), ["succeeded", "aborted", "preempted"])
            StateMachine.add_auto("CLEAR_SCENE_POSTGRASP", planning_scene.ClearCollisionGeometry(robot), ["succeeded", "aborted"])
            StateMachine.add_auto("SETUP_COLLISION_SCENE_POSTGRASP", planning_scene.AddFullPodCollisionGeometry(robot), ["succeeded", "aborted"])
            # StateMachine.add_auto("ADD_IN_HAND_COLLISION_BOX", planning_scene.AddInHandCollisionGeometry(robot), ["succeeded", "aborted"])
            # StateMachine.add("MOVE_TO_PRE_TOTE_POSE", motion.MoveToJointAngles(robot, "drop_hide"),
            #                     {"succeeded": "PICTURE_WAIT", "aborted": "MOVE_INTO_JOINT_LIMITS"})

            StateMachine.add_auto("MOVE_TO_PRE_TOTE_POSE", motion.MoveToJointAngles(robot, "drop_hide"), ["succeeded", "aborted"])
            StateMachine.add("CHECK_FOR_GRIPPER_ITEM", motion.CheckGripperItem(robot),
                            {"item_detected": "POST_PICK_SUCCESS_CLEANUP", "no_item_detected": "RETRY"})


            with pick_success_cleanup_sm:
                StateMachine.add_auto("BLOW_OFF_GRIPPER", motion.BlowOffGripper(robot, return_before_done=True), ["succeeded", "aborted", "preempted"])
                StateMachine.add_auto("PICTURE_WAIT", Wait(2), ["succeeded"])
                StateMachine.add_auto("POST_PICK_UPDATE_MASKS", perception.PickObject(), ["succeeded", "preempted", "aborted"])
                StateMachine.add("ASK_FOR_GRIPPER_OPEN_TOTE_RELEASE", motion.OpenGripper(robot, return_before_done=True), {"succeeded": "succeeded", "preempted": "succeeded", "aborted": "succeeded"})

            with pick_retry_sm:
                StateMachine.add_auto("BLOW_OFF_GRIPPER", motion.BlowOffGripper(robot, return_before_done=True), ["succeeded", "aborted", "preempted"])
                StateMachine.add_auto("PICTURE_WAIT", Wait(2), ["succeeded"])
                StateMachine.add_auto("UPDATE_BIN_MASKS", perception.UpdateBin(), ["succeeded", "preempted", "aborted"])
                StateMachine.add('USER_PROMPT_FOR_RETRY', UserPromptForRetry(robot.tf2_buffer, timeout_connection_secs=1.0), {"retry": "REMAP_GRASP", "continue": "continue"})
                cf.remap_auto("REMAP_GRASP", "human_grasp_pose", "grasp_pose")
                cf.remap("REMAP_PRE_GRASP", "human_pre_grasp_pose", "pre_grasp_pose", {"succeeded": "retry"})

            StateMachine.add("POST_PICK_SUCCESS_CLEANUP", pick_success_cleanup_sm, {"succeeded": "done"})
            StateMachine.add("RETRY", pick_retry_sm, {'retry': 'CLEAR_SCENE_PREMOVE', 'continue': 'done'})


        with stow_sm:
            cf.splat_auto("SPLAT_STOW", "request", ["target_bin_id", "target_object_id", "target_object_asin"])
            StateMachine.add("MOVE_TO_HIDE", motion.MoveToJointAngles(robot, "drop_hide"),
                            {"succeeded": "PRE_PERCEIVE", "aborted": "STOW_FAILED"})
            #TODO: Check that this state actually does anything
            StateMachine.add("PRE_PERCEIVE", perception.CaptureEmptyBin(),
                            {"succeeded": "POST_PERCEIVE", "aborted": "STOW_FAILED", "preempted": "STOW_FAILED"})
            # StateMachine.add("ASK_FOR_BIN_LOAD", interaction.AskForHumanAction(),
            #                 {"succeeded": "POST_PERCEIVE", "aborted": "STOW_FAILED"})
            StateMachine.add("POST_PERCEIVE", perception.StowObject(),
                            {"succeeded": "STOW_SUCCESS", "aborted": "STOW_FAILED", "preempted": "STOW_FAILED"})
            cf.inject_userdata("STOW_FAILED", "done", "status", False)
            cf.inject_userdata("STOW_SUCCESS", "done", "status", True)

        StateMachine.add_auto("CLEAR_SCENE", planning_scene.ClearCollisionGeometry(robot), ["succeeded", "aborted"])
        StateMachine.add_auto("SETUP_COLLISION_SCENE", planning_scene.AddFullPodCollisionGeometryDropHide(robot), ["succeeded", "aborted"])
        StateMachine.add_auto("MOVE_TO_HIDE", motion.MoveToJointAngles(robot, "drop_hide"),  ["succeeded", "aborted"])
        #StateMachine.add_auto("CHECK_GRIPPER_CLOSE", motion.CloseGripper(robot, return_before_done=True), ["succeeded", "aborted", "preempted"])
        #StateMachine.add_auto("CHECK_GRIPPER_OPEN", motion.OpenGripper(robot, return_before_done=True), ["succeeded", "aborted", "preempted"])
        StateMachine.add_auto("CAPTURE_EMPTY_POD", perception.CaptureEmptyPod(),  ["succeeded"])
        StateMachine.add("WAIT_FOR_COMMAND", WaitForPickStow(task_queue), {"stow": "STOW", "pick":"PICK"})
        StateMachine.add("PICK", pick_sm, {"done": "REPORT_OUTCOME"})
        StateMachine.add("STOW", stow_sm, {"done": "REPORT_OUTCOME"})
        StateMachine.add("REPORT_OUTCOME", ReportPickStowOutcome(task_queue), {"succeeded": "WAIT_FOR_COMMAND"})

    rospy.loginfo('Beginning demo SM')

    sis = smach_ros.IntrospectionServer('demo_sm', demo_sm, '/pick')
    sis.start()

    print("State machine introspection server started...")

    outcome = demo_sm.execute()

    rospy.spin()
    sis.stop()


if __name__ == '__main__':
    main()
