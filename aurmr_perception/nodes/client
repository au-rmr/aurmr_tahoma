#!/usr/bin/env python

from __future__ import print_function

import sys
import rospy
import numpy as np
import ros_numpy
from aurmr_perception.srv import *
from geometry_msgs.msg import Pose
from geometry_msgs.msg import PoseStamped
from sensor_msgs.msg import PointCloud2
from sensor_msgs.msg import Image
from sensor_msgs.msg import CameraInfo
from sensor_msgs import point_cloud2

class ImgDepData():
    def __init__(self):
        self.image = None
        self.depth = None
        self.cameraIntrinsics = None
        self.pointcloud = np.zeros((1,1,1))
        self.count_pc = 0
    
    def callback_image(self, imageData):
        pts_1 = ros_numpy.numpify(imageData)
        self.image = pts_1
        print('self.image.shape', self.image.shape)

    def callback_depth(self, depthData):
        pts_2 = ros_numpy.numpify(depthData)
        self.depth = pts_2
        print('self.depth.shape', self.depth.shape)
    
    def callback_cameraInrinsics(self, cameraInfoData):
        self.cameraIntrinsics = np.array(cameraInfoData.K).reshape((3,3))

    def callback_pointcloud(self, pcData):
        pts_3 = ros_numpy.numpify(pcData)
        pts_3 = np.stack([pts_3['x'],
                       pts_3['y'],
                       pts_3['z']], axis=1)

        print('pointcloud.shape', pts_3.shape)

        self.pointcloud = pts_3


    def saveItems(self):
        np.savez('trial.npz', image=self.image, 
                            depth=self.depth, 
                            intrinsics_matrix=self.cameraIntrinsics, 
                            smoothed_object_pc = self.pointcloud)
    
    def listener_rgb_depth(self):
        rospy.init_node('listener_rgb_depth', anonymous=True, disable_signals=True)

        rospy.Subscriber("/camera/color/image_raw", Image, self.callback_image)
        rospy.Subscriber("/camera/aligned_depth_to_color/image_raw", Image, self.callback_depth)
        rospy.Subscriber("/camera/color/camera_info", CameraInfo, self.callback_cameraInrinsics)
        rospy.Subscriber("/camera/depth/color/points", PointCloud2, self.callback_pointcloud)

        rospy.on_shutdown(self.saveItems)

        rospy.spin()


def callback_1(data):
    getPose_client(data)

def listener_pointcloud():
    rospy.init_node('listener_pointcloud', anonymous=True)
    rospy.Subscriber("/camera/depth/color/points", PointCloud2, callback_1)
    rospy.spin()

def getPose_client(pointcloudData):
    print('Waiting for /aurmr_perception/init_grasp to start')
    rospy.wait_for_service('/aurmr_perception/init_grasp')
    tempVar1 = PoseStamped()
    tempVar1.header.frame_id = "camera_link"
    try:
        poseOutputFun = rospy.ServiceProxy('/aurmr_perception/init_grasp', GraspPose)
        resp1 = poseOutputFun(pointcloudData, 0.05, 0, 0)
        tempVar1.pose = resp1.pose
        #print(resp1.pose)
        
        pub_1 = rospy.Publisher('PC', PointCloud2, queue_size=10)
        pub_2 = rospy.Publisher('Pose', PoseStamped, queue_size=10)
        print('Publishing started')
        #rospy.init_node('talker', anonymous=True)
        rate = rospy.Rate(10) # 10hz
        #while not rospy.is_shutdown():
        print(resp1.pose)
        pub_1.publish(pointcloudData)
        pub_2.publish(tempVar1)
        rate.sleep()
    except rospy.ServiceException as e:
        print("Service call failed: %s"%e)

def usage():
    return "%s [x y]"%sys.argv[0]

if __name__ == "__main__":
    print('Client Started')
    #listener_pointcloud()
    #poseData = getPose_client(pointCloudData)
    #publishData(pointCloudData, poseData)
    node = ImgDepData()
    node.listener_rgb_depth()