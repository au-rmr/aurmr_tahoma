#!/usr/bin/env python

import argparse
import rospy
import os
import glob

from aurmr_perception.pod_model import PodPerceptionROS, DummyPodModel
from aurmr_perception.diff_pod_model import DiffPodModel
from aurmr_dataset.dataset import Dataset
from aurmr_dataset.io import DatasetReader

from aurmr_setup.utils.workspace_utils import get_active_workspace_path
workspace_path = get_active_workspace_path()

import pickle
with open('/tmp/calibration_pixel_coords_pod.pkl', 'rb') as f:
    bin_bounds = pickle.load(f)

if __name__ == '__main__':
    rospy.init_node('aurmr_perception')

    parser = argparse.ArgumentParser(description='AURMR Perception Module')
    parser.add_argument('-v', '--viz', action='store_true', default=False)
    parser.add_argument('--diff_threshold', type=int, default=140)
    parser.add_argument('--camera_name', default='stand_camera')
    parser.add_argument('--segmentation_method', default='pixel_difference')
    parser.add_argument('--camera', default='realsense')
    parser.add_argument('--dataset', default='/tmp/datasets/')
    args, unknown = parser.parse_known_args()
    args.viz = rospy.get_param("~viz", args.viz)
    args.camera_name = rospy.get_param("~camera_name", args.camera_name)
    args.camera_type = rospy.get_param("~camera_type", args.camera)
    args.segmentation_method = rospy.get_param("~segmentation_method", args.segmentation_method)
    args.dataset = rospy.get_param("~dataset", args.dataset)

    if os.path.isdir(args.dataset):
        try:
            dataset = DatasetReader(args.dataset).load()
        except FileNotFoundError as e:
            rospy.logwarn(f"There was no existing dataset at {args.dataset}. Will start a new dataset")
            dataset = Dataset()
            dataset.metadata["bin_bounds"] = bin_bounds
    else:
        dataset = Dataset()
        dataset.metadata["bin_bounds"] = bin_bounds

    if args.segmentation_method == "dummy":
        model = DummyPodModel(dataset)
    elif args.segmentation_method == "clustering":
        from aurmr_perception.segnet_pod_model import SegNetPodModel
        model = SegNetPodModel(dataset)
    elif args.segmentation_method == "pixel_difference":
        model = DiffPodModel(dataset, args.diff_threshold, args.segmentation_method)
    else:
        raise Exception("Please specify the segmentation method")

    node = PodPerceptionROS(model, args.dataset, args.camera_name, args.viz, args.camera_type)
    while not rospy.is_shutdown() and not node.received_images:
        rospy.logwarn_throttle(10, "Haven't received images yet")
        rospy.sleep(1)
    rospy.loginfo("Perception initialized")
    rospy.spin()
